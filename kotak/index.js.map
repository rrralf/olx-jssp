{"version":3,"file":"index.js","sources":["../src/kotak-api-httpclient.ts","../src/index.ts","../src/kotak-api-wrapper.ts"],"sourcesContent":["// import '@k2oss/k2-broker-core';\r\nvar XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\r\n\r\n// enable requests tracing\r\nrequire('request').debug = true\r\n\r\nexport module KotakAPIModule {\r\n    export class KotakResponse {\r\n        public messageId: string;\r\n        public statusCode: string;\r\n        public statusDescription: string;\r\n\r\n        public errorCode: string;\r\n        public errorDescription: string;\r\n\r\n        public debugRequest: string;\r\n        public debugResponse: string;\r\n\r\n        constructor() {\r\n            this.errorCode = \"\";\r\n            this.statusCode = \"\";\r\n        }\r\n    }\r\n\r\n    export class KotakHTTPAPI {\r\n        private _paymentActionHeader : string;\r\n        private _reversalActionHeader : string;\r\n        // kotak api base url\r\n        private _endpoint : string;\r\n    \r\n        constructor(baseUrl: string)\r\n        {\r\n            this._paymentActionHeader  = \"/BusinessServices/StarterProcesses/CMS_Generic_Service.serviceagent/Payment\";\r\n            this._reversalActionHeader = \"/BusinessServices/StarterProcesses/CMS_Generic_Service.serviceagent/Reversal\";\r\n            this._endpoint = baseUrl;\r\n        }\r\n\r\n        registerPayment(request : any) : Promise<KotakResponse> {\r\n\r\n            var header = request.RequestHeader;\r\n            var instrument = request.InstrumentList.instrument;\r\n\r\n            var body = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soap:Envelope\r\n    xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:ns0=\"http://www.kotak.com/schemas/CMS_Generic/Payment_Request.xsd\"\r\n    xmlns:ns1=\"http://www.kotak.com/schemas/CMS_Generic/Payment_Response.xsd\"\r\n    xmlns:ns2=\"http://www.kotak.com/schemas/CMS_Generic/Reversal_Request.xsd\"\r\n    xmlns:ns3=\"http://www.kotak.com/schemas/CMS_Generic/Reversal_Response.xsd\"\r\n    xmlns:tns=\"http://xmlns.kotak.com/CMS_Generic_Service\">\r\n    <soap:Body>\r\n        <ns0:Payment\r\n            xmlns:ns0=\"http://www.kotak.com/schemas/CMS_Generic/Payment_Request.xsd\"\r\n            xmlns=\"http://www.kotak.com/schemas/CMS_Generic/Payment_Request.xsd\">\r\n            <ns0:RequestHeader>\r\n                <ns0:MessageId>${header.MessageId}</ns0:MessageId>\r\n                <ns0:MsgSource>${header.MsgSource}</ns0:MsgSource>\r\n                <ns0:ClientCode>${header.ClientCode}</ns0:ClientCode>\r\n                <ns0:BatchRefNmbr>${header.BatchRefNmbr}</ns0:BatchRefNmbr>\r\n            </ns0:RequestHeader>\r\n            <ns0:InstrumentList>\r\n                <ns0:instrument>\r\n                    <ns0:InstRefNo>${instrument.InstRefNo}</ns0:InstRefNo>\r\n                    <ns0:MyProdCode>${instrument.MyProdCode}</ns0:MyProdCode>\r\n                    <ns0:PayMode>${instrument.PayMode}</ns0:PayMode>\r\n                    <ns0:TxnAmnt>${instrument.TxnAmnt}</ns0:TxnAmnt>\r\n                    <ns0:AccountNo>${instrument.AccountNo}</ns0:AccountNo>\r\n                    <ns0:DrDesc>${instrument.DrDesc}</ns0:DrDesc>\r\n                    <ns0:PaymentDt>${instrument.PaymentDt}</ns0:PaymentDt>\r\n                    <ns0:RecBrCd>${instrument.RecBrCd}</ns0:RecBrCd>\r\n                    <ns0:BeneAcctNo>${instrument.BeneAcctNo}</ns0:BeneAcctNo>\r\n                    <ns0:BeneName>${instrument.BeneName}</ns0:BeneName>\r\n                    <ns0:InstDt>${instrument.InstDt}</ns0:InstDt>\r\n                    <ns0:PaymentDtl1>${instrument.PaymentDtl1}</ns0:PaymentDtl1>\r\n                    <ns0:EnrichmentSet>\r\n                        <ns0:Enrichment>${instrument.EnrichmentSet.Enrichment}</ns0:Enrichment>\r\n                    </ns0:EnrichmentSet>\r\n                </ns0:instrument>\r\n            </ns0:InstrumentList>\r\n        </ns0:Payment>\r\n    </soap:Body>\r\n</soap:Envelope>`;\r\n\r\n            var _ep = this._endpoint;\r\n            var _action = this._paymentActionHeader;\r\n\r\n            return new Promise<KotakResponse>((resolve, reject) => {\r\n                var rr = new KotakResponse();\r\n                rr.messageId = header.MessageId;\r\n                rr.debugRequest = body;\r\n\r\n\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.onreadystatechange = function() {\r\n                    try {\r\n                        if (xhr.readyState !== 4) return;\r\n                        if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status + \"; \" + xhr.responseText);\r\n        \r\n                        rr.debugResponse = xhr.responseText;\r\n\r\n                        // parse response\r\n                        var DOMParser = require('xmldom').DOMParser;\r\n                        var doc = new DOMParser().parseFromString(xhr.responseText);\r\n                        \r\n                        var detailDoc = doc.documentElement.getElementsByTagName('ns0:AckHeader')[0];\r\n                        var msgId = detailDoc.getElementsByTagName(\"ns0:MessageId\")[0].textContent;\r\n                        var statusCode = detailDoc.getElementsByTagName(\"ns0:StatusCd\")[0].textContent;\r\n                        var statusDesc = detailDoc.getElementsByTagName(\"ns0:StatusRem\")[0].textContent;\r\n                        \r\n                        rr.errorCode = \"0\";\r\n                        rr.messageId = msgId;\r\n                        rr.statusCode = statusCode;\r\n                        rr.statusDescription = statusDesc;\r\n                        \r\n                        resolve(rr);\r\n                    } catch (e) {\r\n                        rr.errorCode = \"-1\";\r\n                        rr.errorDescription = e.message;\r\n\r\n                        reject(rr);\r\n                    }\r\n                };\r\n                \r\n                xhr.open(\"POST\", _ep);\r\n                xhr.setRequestHeader('Content-Type', 'application/soap+xml');\r\n                xhr.setRequestHeader('action', _action);\r\n                xhr.send(body);\r\n            });\r\n\r\n        }\r\n\r\n        getPaymentState(request : any) : Promise<KotakResponse> {\r\n            var body = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soap:Envelope\r\n    xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:ns0=\"http://www.kotak.com/schemas/CMS_Generic/Payment_Request.xsd\"\r\n    xmlns:ns1=\"http://www.kotak.com/schemas/CMS_Generic/Payment_Response.xsd\"\r\n    xmlns:ns2=\"http://www.kotak.com/schemas/CMS_Generic/Reversal_Request.xsd\"\r\n    xmlns:ns3=\"http://www.kotak.com/schemas/CMS_Generic/Reversal_Response.xsd\"\r\n    xmlns:tns=\"http://xmlns.kotak.com/CMS_Generic_Service\">\r\n    <soap:Body>\r\n        <ns2:Reversal\r\n            xmlns:ns2=\"http://www.kotak.com/schemas/CMS_Generic/Reversal_Request.xsd\"\r\n            xmlns=\"http://www.kotak.com/schemas/CMS_Generic/Reversal_Request.xsd\">\r\n            <ns2:Header>\r\n                <ns2:Req_Id>${request.Header.Req_Id}</ns2:Req_Id>\r\n                <ns2:Msg_Src>${request.Header.Msg_Src}</ns2:Msg_Src>\r\n                <ns2:Client_Code>${request.Header.Client_Code}</ns2:Client_Code>\r\n                <ns2:Date_Post>${request.Header.Date_Post}</ns2:Date_Post>\r\n            </ns2:Header>\r\n            <ns2:Details>\r\n                <ns2:Msg_Id>${request.Details.Msg_Id}</ns2:Msg_Id>\r\n            </ns2:Details>\r\n        </ns2:Reversal>\r\n    </soap:Body>\r\n</soap:Envelope>`;\r\n    \r\n            \r\n            var _ep = this._endpoint;\r\n            var _action = this._reversalActionHeader;\r\n\r\n            return new Promise<KotakResponse>((resolve, reject) => {\r\n                var rr = new KotakResponse();\r\n                rr.messageId = request.Header.Req_Id;\r\n                rr.debugRequest = body;\r\n\r\n\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.onreadystatechange = function() {\r\n                    try {\r\n                        if (xhr.readyState !== 4) return;\r\n                        if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status + \"; \" + xhr.responseText);\r\n        \r\n                        rr.debugResponse = xhr.responseText;\r\n\r\n                        // parse response\r\n                        var DOMParser = require('xmldom').DOMParser;\r\n                        var doc = new DOMParser().parseFromString(xhr.responseText);\r\n                        \r\n                        var detailDoc = doc.documentElement.getElementsByTagName('ns0:Rev_Detail')[0];\r\n                        var msgId = detailDoc.getElementsByTagName(\"ns0:Msg_Id\")[0].textContent;\r\n                        var statusCode = detailDoc.getElementsByTagName(\"ns0:Status_Code\")[0].textContent;\r\n                        var statusDesc = detailDoc.getElementsByTagName(\"ns0:Status_Desc\")[0].textContent;\r\n                        \r\n                        rr.errorCode = \"0\";\r\n                        rr.messageId = msgId;\r\n                        rr.statusCode = statusCode;\r\n                        rr.statusDescription = statusDesc;\r\n                        \r\n                        resolve(rr);\r\n                    } catch (e) {\r\n                        rr.errorCode = \"-1\";\r\n                        rr.errorDescription = e.message;\r\n\r\n                        reject(rr);\r\n                    }\r\n                };\r\n                \r\n                xhr.open(\"POST\", _ep);\r\n                xhr.setRequestHeader('Content-Type', 'application/soap+xml');\r\n                xhr.setRequestHeader('action', _action);\r\n                xhr.send(body);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import '@k2oss/k2-broker-core';\r\n\r\nimport { KotakAPIWrapper } from './kotak-api-wrapper';\r\nimport { KotakAPIModule } from './kotak-api-httpclient';\r\n\r\n// K2 API\r\nmetadata = {\r\n    systemName: \"KotakBankAPI\",\r\n    displayName: \"Kotak Bank API\",\r\n    description: \"An example broker that accesses to Kotak Bank API.\",\r\n    \"configuration\": { //configuration values (service keys)\r\n        // endpoint URL configuration parameter\r\n        \"EndpointUrl\": {\r\n            displayName: \"Endpoint Url\",\r\n            type: \"string\",\r\n            value: \"https://apigwuat.kotak.com:8443/cms_generic_service?apikey=l7xx9e2c880d0b4549049ff62c5bf595c310\" // valid values are Alphabetic, Numeric, Alphanumeric\r\n        }\r\n    },    \r\n};\r\n\r\nondescribe = async function({configuration}): Promise<void> {\r\n    postSchema({            // this section is the schema describes the K2 service\r\n        objects: {\r\n            \"KotakBankAPI\": {   // service object system name\r\n                displayName: \"Kotak Bank payment API\",\r\n                description: \"Kotak Bank payment API\",\r\n                properties: {\r\n                    \"resultMessage\": {\r\n                        displayName: \"ResultMessage\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"statusCode\": {\r\n                        displayName: \"statusCode\",\r\n                        type: \"string\"\r\n                    },\r\n                    \"statusDescription\": {\r\n                        displayName: \"statusDescription\",\r\n                        type: \"string\"\r\n                    },\r\n                },\r\n                methods: {\r\n                    \"RegisterPayment\": {\r\n                        displayName: \"Perform payment request\",\r\n                        type: \"execute\",\r\n                        parameters: {\r\n                            \"pMessageId\": { displayName: \"pMessageId\", description: \"Message Id\", type: \"string\"},\r\n                            \"pMessageSource\": { displayName: \"pMessageSource\", description: \"Message Source\", type: \"string\"},\r\n                            \"pClientCode\": { displayName: \"pClientCode\", description: \"Client Code\", type: \"string\"},\r\n                            \"pTxnAmount\": { displayName: \"pTxnAmount\", description: \"Transaction amount\", type: \"number\"},\r\n                            \"pAccountNo\": { displayName: \"pAccountNo\", description: \"Account No\", type: \"string\"},\r\n                            \"pRecBrCd\": { displayName: \"pRecBrCd\", description: \"RecBrCd\", type: \"string\"},\r\n                            \"pPaymentDt\": { displayName: \"pPaymentDt\", description: \"Payment Date\", type: \"string\"},\r\n                            \"pBeneAccountNo\": { displayName: \"pBeneAccountNo\", description: \"Bene account No\", type: \"string\"},\r\n                            \"pDrDesc\": { displayName: \"pDrDesc\", description: \"DrDesc\", type: \"string\"},\r\n                            \"pBeneName\": { displayName: \"pBeneName\", description: \"BeneName\", type: \"string\"},\r\n                            \"pInstDate\": { displayName: \"pInstDate\", description: \"InstDt\", type: \"string\"},\r\n                            \"pPaymentDtl1\": { displayName: \"pPaymentDtl1\", description: \"pPaymentDtl1\", type: \"string\"},\r\n                            \"pEnrichment\": { displayName: \"pEnrichment\", description: \"pEnrichment\", type: \"string\"}\r\n                        },\r\n                        requiredParameters: [ \r\n                            \"pMessageId\", \"pTxnAmount\" \r\n                        ],\r\n                        outputs: [ \"statusCode\", \"statusDescription\" ]\r\n                    },\r\n                    \"GetPaymentState\": {\r\n                        displayName: \"Get payment state\",\r\n                        type: \"read\",\r\n                        parameters: {\r\n                            \"pMessageId\": { displayName: \"pMessageId\", description: \"Message Id\", type: \"string\"},\r\n                            \"pMessageSource\": { displayName: \"pMessageSource\", description: \"Message Source\", type: \"string\"},\r\n                            \"pClientCode\": { displayName: \"pClientCode\", description: \"Client Code\", type: \"string\"}\r\n                        },\r\n                        requiredParameters: [ \r\n                            \"pMessageId\", \"pTxnAmount\" \r\n                        ],\r\n                        outputs: [ \"statusCode\", \"statusDescription\" ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\r\n    switch (objectName)\r\n    {\r\n        case \"KotakBankAPI\": await onexecuteKotakBank(methodName, properties, parameters, configuration); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteKotakBank(methodName: string, properties: SingleRecord, parameters: SingleRecord, configuration): Promise<void> {\r\n    switch (methodName)\r\n    {\r\n        case \"RegisterPayment\": await kotakRegisterPayment(parameters, configuration); break;\r\n        case \"GetPaymentState\": await kotakGetPaymentState(parameters, configuration); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\n\r\nfunction kotakRegisterPayment(parameters: SingleRecord, configuration): Promise<void> {\r\n    var endpoint = configuration[\"EndpointUrl\"];\r\n\r\n    return new Promise<void>((resolve, reject) =>\r\n    {\r\n        var wrap = new KotakAPIWrapper.KotakAPIWrapper(endpoint);\r\n        wrap.registerPayment(parameters)\r\n        .then((response) => {\r\n            console.log(response);\r\n\r\n            // return results to K2\r\n            postResult(toK2Result(response));\r\n            resolve();\r\n        }) \r\n        .catch((err) => {\r\n            console.log(err);\r\n\r\n            postResult(toK2Result(err));\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nfunction kotakGetPaymentState(parameters: SingleRecord, configuration): Promise<void> {\r\n    var endpoint = configuration[\"EndpointUrl\"];\r\n\r\n    // default wsdl file\r\n    var wsdlFile = './assets/cms_generic_service.wsdl';\r\n\r\n\r\n    return new Promise<void>((resolve, reject) =>\r\n    {\r\n        var wrap = new KotakAPIWrapper.KotakAPIWrapper(endpoint);\r\n        wrap.getPaymentState(parameters)\r\n        .then((response) => {\r\n            console.log(response);\r\n\r\n            // return results to K2\r\n            postResult(toK2Result(response));\r\n            resolve();\r\n        }) \r\n        .catch((err) => {\r\n            console.log(err);\r\n\r\n            postResult(toK2Result(err));\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nfunction toK2Result(response : KotakAPIModule.KotakResponse) {\r\n    return {\r\n        \"messageId\": response.messageId,\r\n\r\n        \"statusCode\": response.statusCode,\r\n        \"statusDescription\": response.statusDescription,\r\n\r\n        \"errorCode\": response.errorCode,\r\n        \"errorDescription\": response.errorDescription,\r\n\r\n        \"debugRequest\": response.debugRequest,\r\n        \"debugResponse\": response.debugResponse\r\n    };\r\n}","import { KotakAPIModule } from './kotak-api-httpclient';\r\n\r\nexport module KotakAPIWrapper {\r\n    export class KotakAPIWrapper {\r\n        private _api : KotakAPIModule.KotakHTTPAPI;\r\n\r\n        constructor(endpoint: string) {\r\n            this._api = new KotakAPIModule.KotakHTTPAPI(endpoint);\r\n        }\r\n\r\n        registerPayment(parameters: any) : Promise<KotakAPIModule.KotakResponse> {\r\n            // payment params\r\n            var messageId = parameters[\"pMessageId\"] as string;\r\n            var msgSource = parameters[\"pMessageSource\"];\r\n            var clientCode = parameters[\"pClientCode\"];\r\n        \r\n            var prodCode = \"WPAY\";\r\n            var payMode = \"NEFT\";\r\n        \r\n            var transactionAmount = parameters[\"pTxnAmount\"];\r\n            var accountNo = parameters[\"pAccountNo\"];\r\n            var recBrCd = parameters[\"pRecBrCd\"];\r\n            var paymentDt = parameters[\"pPaymentDt\"];\r\n            var beneAcctNo = parameters[\"pBeneAccountNo\"];\r\n            var drDesc = parameters[\"pDrDesc\"];\r\n            var beneName = parameters[\"pBeneName\"];\r\n            var instDt = parameters[\"pInstDate\"];\r\n            var paymentDtl1 = parameters[\"pPaymentDtl1\"];\r\n            var enrichment = parameters[\"pEnrichment\"];\r\n        \r\n        \r\n            var paymentRequest = {\r\n                RequestHeader: {\r\n                    MessageId: messageId,\r\n                    MsgSource: msgSource,\r\n                    ClientCode: clientCode,\r\n                    BatchRefNmbr: messageId\r\n                },\r\n                InstrumentList: {\r\n                    instrument: {\r\n                        InstRefNo: messageId,\r\n                        MyProdCode: prodCode,\r\n                        PayMode: payMode,\r\n                        TxnAmnt: transactionAmount,\r\n                        AccountNo: accountNo,\r\n                        DrDesc: drDesc,\r\n                        PaymentDt: paymentDt,\r\n                        RecBrCd: recBrCd,\r\n                        BeneAcctNo: beneAcctNo,\r\n                        BeneName: beneName,\r\n                        InstDt: instDt,\r\n                        PaymentDtl1: paymentDtl1,\r\n                        EnrichmentSet: {\r\n                            Enrichment: enrichment\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            return new Promise<KotakAPIModule.KotakResponse>((resolve, reject) => {\r\n                this._api.registerPayment(paymentRequest)\r\n                .then((response) => {\r\n                    resolve(response)\r\n                }) \r\n                .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }\r\n\r\n        getPaymentState(parameters: any) : Promise<KotakAPIModule.KotakResponse> {\r\n            // payment params\r\n            var messageId = parameters[\"pMessageId\"] as string;\r\n            var msgSource = parameters[\"pMessageSource\"];\r\n            var clientCode = parameters[\"pClientCode\"];\r\n        \r\n            var paymentStateRequest = {\r\n                Header: {\r\n                    Req_Id: messageId,\r\n                    Msg_Src: msgSource,\r\n                    Client_Code: clientCode,\r\n                    Date_Post: \"\"\r\n                },\r\n                Details: {\r\n                    Msg_Id: messageId\r\n                }\r\n            };\r\n        \r\n            return new Promise<KotakAPIModule.KotakResponse>((resolve, reject) => {\r\n                this._api.getPaymentState(paymentStateRequest)\r\n                .then((response) => {\r\n                    resolve(response)\r\n                }) \r\n                .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }\r\n    }\r\n}"],"names":["XMLHttpRequest","require","onexecuteKotakBank","methodName","properties","parameters","configuration","kotakRegisterPayment","kotakGetPaymentState","Error","endpoint","Promise","resolve","reject","KotakAPIWrapper","registerPayment","then","response","console","log","postResult","toK2Result","catch","err","getPaymentState","messageId","statusCode","statusDescription","errorCode","errorDescription","debugRequest","debugResponse","debug","KotakResponse","KotakHTTPAPI","baseUrl","_paymentActionHeader","_reversalActionHeader","_endpoint","request","header","RequestHeader","instrument","InstrumentList","body","MessageId","MsgSource","ClientCode","BatchRefNmbr","InstRefNo","MyProdCode","PayMode","TxnAmnt","AccountNo","DrDesc","PaymentDt","RecBrCd","BeneAcctNo","BeneName","InstDt","PaymentDtl1","EnrichmentSet","Enrichment","_ep","this","_action","rr","xhr","onreadystatechange","readyState","status","responseText","detailDoc","DOMParser","parseFromString","documentElement","getElementsByTagName","msgId","textContent","statusDesc","e","message","open","setRequestHeader","send","Header","Req_Id","Msg_Src","Client_Code","Date_Post","Details","Msg_Id","KotakAPIModule","_api","msgSource","clientCode","transactionAmount","accountNo","recBrCd","paymentDt","beneAcctNo","paymentRequest","_this","paymentStateRequest","_this2","metadata","systemName","displayName","description","type","value","ondescribe","postSchema","objects","methods","requiredParameters","outputs","onexecute","objectName","schema"],"mappings":"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"}